#!/usr/bin/env bash
# shellcheck disable=SC2015,SC1090,SC2191

# MIT license (c) 2021 https://github.com/slowpeek
# Homepage: https://github.com/slowpeek/mozilla-update

v=("${BASH_VERSINFO[@]}")
if ((v[0] < 4 || (v[0] == 4 && v[1] < 3))); then
    echo "This script requires bash 4.3. Yours is ${v[0]}.${v[1]}"
    exit 1
fi
unset -f v

set -eu

! test -f "${BASH_SOURCE[0]%/*}"/locate-exit.sh || source "$_"

# --------------------------------------------------------------
# MIT license (c) 2021 https://github.com/slowpeek
# Homepage: https://github.com/slowpeek/here-bye

_ () {
    IFS=, read -r -a HERE_PREFIX <<< "${HERE_PREFIX-}"
    IFS=, read -r -a BYE_PREFIX <<< "${BYE_PREFIX-}"
}; _; unset -f _

here () {
    if (($# > 0)); then
        if [[ -v HERE_PREFIX ]]; then
            printf '[%s]' "${HERE_PREFIX[@]}"
            echo -n ' '
        fi

        local IFS=' '
        printf '%s\n' "$*"
    fi
}

here2 () {
    here "$@" >&2
}

bye () {
    if [[ -v BYE_PREFIX ]]; then
        HERE_PREFIX=(
            "${BYE_PREFIX[@]}"
            ${HERE_PREFIX[@]+"${HERE_PREFIX[@]}"}
        )
    fi

    here "$@" >&2
    exit "${BYE_EXIT:-1}"
}
# --------------------------------------------------------------

# Rename bye => org_bye
eval org_"$(declare -f bye)"

here_prefix () {
    HERE_PREFIX+=("$1")
}

here_unprefix () {
    unset -v 'HERE_PREFIX[-1]'
}

here_color () {
    if [[ -v HERE_PREFIX ]]; then
        HERE_PREFIX[-1]=$1${HERE_PREFIX[-1]}$'\e[0m'
        undo=trim
    else
        here_prefix "$1$2"$'\e[0m'
        undo=pop
    fi
}

here_uncolor () {
    if [[ $1 == trim ]]; then
        HERE_PREFIX[-1]=${HERE_PREFIX[-1]:5:-4}
    else
        here_unprefix
    fi
}

here_colorful () {
    local undo
    here_color "$1" "$2"
    here "${@:3}"
    here_uncolor "$undo"
}

here_success () {
    here_colorful $'\e[32m' success "$@"
}

here_warn () {
    here_colorful  $'\e[33m' warning "$@"
}

bye () {
    local undo
    here_color $'\e[31m' error
    org_bye "$@"
}

curl () {
    command curl --connect-timeout 3 --compressed -f "$@"
}

is_bin () {
    type -P "$1" >/dev/null
}

need_bin () {
    local bin

    for bin; do
        ! is_bin "$bin" || return 0
    done

    local msg='cant find '
    (($#>1)) && msg+="any of binaries: $*" || msg+="binary: $1"

    bye "$msg"
}

version_le () {
    printf '%s\n' "$1" "$2" | sort --check=quiet -V
}

_dir () { [[ -d $1 ]] || bye "'$1' is not a dir"; }
w_dir () { [[ -w $1 && -x $1 ]] || bye "'$1' is not writable"; }
r_dir () { [[ -r $1 && -x $1 ]] || bye "'$1' is not readable"; }

installed_versions () {
    r_dir "$base"

    [[ $1 == list ]] || local -n list=$1
    list=()

    local dir
    for dir in $(cd "$base"; compgen -G "$pkg-*[0-9]*" | sort -Vr); do
        if [[ $dir == *esr ]]; then
            [[ $type == esr ]] || continue
            list+=("$dir")
        elif [[ $dir == *[0-9]b+([0-9]) ]]; then
            [[ $type == beta ]] || continue
            list+=("$dir")
        else
            [[ $type == release ]] || continue
            list+=("$dir")
        fi
    done

    [[ ! -v list ]] || list=("${list[@]#*-}")
}

latest_version () {
    need_bin curl

    [[ $1 == ver ]] || local -n ver=$1
    ver=

    local -A patterns=(
        [release]='\d+\.\d+(\.\d+)?'
        [beta]='\d+\.0b\d+'
        [esr]='\d+\.\d+(\.\d+)?esr'
    )

    ver=$(curl -sS "$base_url/" 2>/dev/null |
              grep -oP "${patterns[$type]}(?=/</a>)" |
              sort -Vr | head -n1)

    [[ -n $ver ]] || bye "cant get latest $name version"
}

check_gpg_key () {
    here_prefix gpg
    need_bin gpg

    local key=14F26682D0916CDD81E37B6D61B7B526D98F0353

    if ! gpg --list-key "$key" &>/dev/null; then
        # keyserver.ubuntu.com still works with trusty
        gpg --recv-keys --keyserver keyserver.ubuntu.com "$key" || bye 'key fetch fail'
        here_success 'key fetch OK'
    fi

    here_unprefix
}

download_latest () {
    here_prefix download
    here "pkg=$name lang=$lang"

    local installed
    installed_versions installed
    here "installed version: ${installed:-none}"

    local latest
    latest_version latest
    here "latest version: $latest"

    if [[ -v installed ]] && version_le "$latest" "$installed"; then
        here 'no updates available'
        exit
    fi

    local fn=$pkg-$latest.tar.bz2 args=() f

    for f in "$fn"{,.asc}; do
        [[ -e $f ]] || args+=(-O "$base_url/$latest/linux-$HOSTTYPE/$lang/$f")
    done

    if [[ -v args ]]; then
        [[ -w . ]] || bye "'$PWD' is not writable"

        curl "${args[@]}" || bye 'curl error'
        here_success "$((${#args[@]} >> 1)) files fetched"
    else
        here 'skip fetch'
    fi

    check_gpg_key

    gpg --verify "$fn".asc || bye 'gpg verify fail'
    here_success 'good gpg signature'

    if (($#)); then
        [[ $1 == file ]] || local -n file=$1
        # shellcheck disable=SC2034
        file=$fn
    fi

    here_unprefix
}

select_version () {
    here_prefix select

    local installed
    installed_versions installed

    [[ -v installed ]] || bye 'nothing to select from'

    local link=$base/$name link_action=create cur=
    readonly link               # Protect from unintended changes
                                # since it is used below with ln -sf.

    if [[ -h $link ]]; then
        cur=$(readlink "$link")
        [[ $cur == $pkg-* ]] || bye "'$link' target looks invalid"

        cur=${cur#*-}
        link_action=update
    else
      [[ ! -e $link ]] || bye "'$link' must be a symlink"
    fi

    [[ -z $cur ]] || installed=("${installed[@]/%$cur/$cur*}")

    # '-u' for unattended mode.
    if [[ ${1-} != -u ]]; then
        echo -e "\nWhich version of $name the symlink should point to:\n"

        local sel PS3=$'\nYour choice: '
        select sel in "${installed[@]}"; do
            break
        done <<< dummy
    fi

    read -r sel || true

    [[ ${1-} == -u ]] || echo

    if [[ -n $sel ]]; then
        [[ $sel == [1-9]*([0-9]) ]] && ((sel <= ${#installed[@]})) ||
            bye 'there was no such option'

        sel=${installed[sel-1]%\*}
    fi

    if [[ -z $sel || $sel == "$cur" ]]; then
        here 'no changes'
        exit
    fi

    w_dir "$base"
    ln -sfT "$pkg-$sel" "$link" || bye "cant $link_action '$link'"

    here_success "$link_action link: $name => $pkg-$sel"
    here_unprefix
}

list_langs () {
    here_prefix langs
    here "pkg=$name"

    local latest
    latest_version latest
    here "latest version: $latest"

    local langs
    # 'cat' is used below to ensure pipe status=0
    readarray -t langs < <(curl -sS "$base_url/$latest/linux-$HOSTTYPE/" 2>/dev/null |
                               grep -oP '(?<=>)[^/]+(?=/</a>)' | cat)

    [[ -v langs ]] || bye "cant list langs for $name"

    need_bin column

    echo -e "\n${#langs[@]} available languages:\n"
    printf '%s\n' "${langs[@]}" | pr -t8 -s' ' | column -t

    here_unprefix
}

desktop_file () {
    local app_name=${pkg^}

    case $type in
        beta)
            app_name+=' Beta'
            ;;
        esr)
            app_name+=' ESR'
            ;;
    esac

    local exec=${name}
    [[ $search == y ]] || exec=$base/$name/$pkg

    local icon=${base}/${name}/chrome/icons/default/default128.png

    if [[ $pkg == firefox* ]]; then
        cat <<EOF
[Desktop Entry]
Version=1.0
Name=${app_name}
Exec=${exec} %u
Categories=Network;WebBrowser;
Type=Application
MimeType=text/html;text/xml;application/xhtml+xml;application/xml;application/rss+xml;application/rdf+xml;image/gif;image/jpeg;image/png;x-scheme-handler/http;x-scheme-handler/https;x-scheme-handler/chrome;video/webm;application/x-xpinstall;
Icon=${icon}
Terminal=false
StartupNotify=true
Actions=new-window;new-private-window;

[Desktop Action new-window]
Name=Open a new window
Exec=${exec} -new-window

[Desktop Action new-private-window]
Name=Open a new private window
Exec=${exec} -private-window

EOF
    else
        cat <<EOF
[Desktop Entry]
Version=1.0
Name=${app_name}
Exec=${exec} %u
Categories=Network;Email;
Type=Application
MimeType=x-scheme-handler/mailto;application/x-xpinstall;
Icon=${icon}
Terminal=false
StartupNotify=true
Actions=compose;contacts

[Desktop Action compose]
Name=Compose new message
Exec=${exec} -compose

[Desktop Action contacts]
Name=Contacts
Exec=${exec} -addressbook

EOF
    fi
}

install_file () {
    here_prefix install

    [[ -f $1 ]] || bye "'$1' is not a regular file"
    [[ -r $1 ]] || bye "'$1' is not readable"
    [[ $1 == *.tar.bz2 ]] || bye "'$1' is not a .tar.bz2 archive"

    local fn=${1##*\/}

    [[ $fn == @(firefox|thunderbird)-[1-9]* ]] ||
        bye "'$1' doesnt look like a mozilla package"

    w_dir "$base"

    local dir=$base/${1%.tar.bz2}
    if [[ -e $dir ]]; then
        _dir "$dir"
        w_dir "$dir"
    else
        mkdir "$dir"
    fi

    here "extract to '$dir'"

    need_bin bzip2 lbzip2

    local args=(-C "$dir" --strip-components=1 --checkpoint=.400)
    ! is_bin lbzip2 || args+=(-I lbzip2)
    tar xf "$1" "${args[@]}" || bye 'extract fail'

    echo
    here_success 'extract OK'
    here_unprefix
}

getopt () {
    [[ $1 == map ]] || local -n map=$1
    shift

    local i n=${#map[@]} short='' long=''
    for ((i=0; i<n; i+=2)); do
        short+=${map[i]}
        long+=,${map[i+1]}
    done

    short=${short//-}           # '-' is used for long options without
                                # a short alias
    long=${long:1}              # Trim leading comma.

    command getopt -o "+$short" -l "$long" -- "$@"
}

set_pkg () {
    name=${1,,}

    local -A names=(
        [firefox]=t [firefox-beta]=t [firefox-esr]=t
        [thunderbird]=t [thunderbird-beta]=t
    )

    [[ -v names[$name] ]] || bye "valid package names are: ${!names[*]}"

    pkg=$name
    type=release

    if [[ $name == *-* ]]; then
        pkg=${name%-*}
        type=${name#*-}
    fi
}

check_reqs () {
    # arch
    [[ $HOSTTYPE == @(x86_64|i686) ]] ||
        bye 'Mozilla only provides packages for x86_64 and i686.' \
            "Your arch is $HOSTTYPE"

    # glibc
    local req=2.17 line

    read -r line < <(ldd --version)
    line=${line##*[[:space:]]}

    if [[ $line == 2.* ]]; then
        version_le "$req" "$line" ||
            here_warn "glibc $line is not supported." \
                      "Mozilla builds require glibc $req at least."
    else
        here_warn 'cant figure out glibc version'
    fi
}

usage () {
    local self=${BASH_SOURCE[0]##*/}

    cat <<EOF
USAGE

Upgrade mode
    ${self} [--lang <lang>] [--base <dir>] <package>

Steps of the upgrade mode
    ${self} --download [--lang <lang>] <package>
    ${self} --install [--base <dir>] <file>
    ${self} --select [--base <dir>] <package>

Utils
    ${self} --list-langs <package>
    ${self} [--no-path] --desktop-file <package>

Package is one of: firefox, firefox-beta, firefox-esr, thunderbird,
thunderbird-beta.

By default try to download and install the latest version of a package
in 'en-US' language into '/opt/mozilla' and refresh the symlink there.


OPTIONS SUMMARY

Settings

-b --base <dir>
    Base dir for installations. By default '/opt/mozilla'.

-l --lang <lang>
    Package language to download. By default 'en-US'.

--no-path
    Only applicable to --desktop-file. By default the 'Exec' property
    contains a full path to the binary. With this option it would be
    just a package name like 'firefox' or 'firefox-esr'.

Actions

-d --download
    Download the latest version of a package into the current dir if
    only an update is available and verify the signature.

-i --install
    Install a previously downloaded archive into the base dir.

-s --select
    Interactively select version for a package's symlink in the base
    dir.

--list-langs
    List available languages for the latest version of a package.

--desktop-file
    Generate a desktop file for the package.

EOF
    exit
}

main () {
    check_reqs

    (($#)) || usage

    local map=(
        d download i install s select - list-langs - desktop-file
        l: lang: b: base: - no-path
    )

    local opts
    opts=$(getopt map "$@") || bye 'options error'
    eval set -- "$opts"
    unset -v opts map

    local mode=default lang=en-US base=/opt/mozilla search=n

    while true; do
        case $1 in
            --)
                shift
                break
                ;;
            -d|--download)
                mode=download
                ;;
            -i|--install)
                mode=install
                ;;
            -s|--select)
                mode=select
                ;;
            --list-langs)
                mode=langs
                ;;
            --desktop-file)
                mode=desktop
                ;;
            --no-path)
                search=y
                ;;
            -l|--lang)
                lang=$2
                shift
                ;;
            -b|--base)
                base=$2
                shift
                ;;
        esac

        shift
    done

    if [[ $mode == !(langs|desktop) ]]; then
        _dir "$base"

        # Ensure $base is an absolute path.
        if [[ $base != /* ]]; then
            is_bin realpath && base=$(realpath -s "$base") ||
                    base=$(readlink -m "$base")
        fi
    fi

    if [[ $mode == install ]]; then
        (($#)) || bye 'a file arg is required'

        install_file "$1"
        return
    fi

    (($#)) || bye 'a package name arg is required'

    local name pkg type
    set_pkg "$1"

    local base_url=https://download-installer.cdn.mozilla.net/pub/$pkg/releases

    case $mode in
        'download')
            download_latest
            ;;
        'select')
            select_version
            ;;
        'langs')
            list_langs
            ;;
        'desktop')
            desktop_file
            ;;
        'default')
            local token=${BASH_SOURCE[0]##*/}
            token=${token%%.*}

            # Readonly flag is used here to protect $dir from
            # unintentional changes until the dir is deleted.
            local -r dir=${TMPDIR:-/tmp}/$token:$name

            [[ -e $dir ]] && _dir "$dir" || mkdir "$dir"
            pushd "$dir" >/dev/null

            local file
            download_latest file

            install_file "$file"

            (select_version -u <<< 1) || exit

            popd >/dev/null
            rm -r "$dir"
            ;;
    esac
}

[[ ! ${BASH_SOURCE[0]} == "$0" ]] || main "$@"
